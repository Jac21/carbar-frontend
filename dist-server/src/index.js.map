{"version":3,"sources":["../../server/src/index.js"],"names":["__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","value","step","next","e","rejected","result","done","then","apply","Object","defineProperty","exports","require","typeorm_1","express","bodyParser","routes_1","createConnection","connection","app","use","json","req","res","header","AppRoutes","forEach","route","method","path","request","response","action","catch","err","port","listen","console","log","error"],"mappings":"AAAA;;;;;;;;AACA,IAAIA,YAAa,aAAQ,UAAKA,SAAd,IAA4B,UAAUC,OAAV,EAAmBC,UAAnB,EAA+BC,CAA/B,EAAkCC,SAAlC,EAA6C;AACrF,WAAO,KAAKD,MAAMA,IAAIE,OAAV,CAAL,EAAyB,UAAUC,OAAV,EAAmBC,MAAnB,EAA2B;AACvD,iBAASC,SAAT,CAAmBC,KAAnB,EAA0B;AAAE,gBAAI;AAAEC,qBAAKN,UAAUO,IAAV,CAAeF,KAAf,CAAL;AAA8B,aAApC,CAAqC,OAAOG,CAAP,EAAU;AAAEL,uBAAOK,CAAP;AAAY;AAAE;AAC3F,iBAASC,QAAT,CAAkBJ,KAAlB,EAAyB;AAAE,gBAAI;AAAEC,qBAAKN,UAAU,OAAV,EAAmBK,KAAnB,CAAL;AAAkC,aAAxC,CAAyC,OAAOG,CAAP,EAAU;AAAEL,uBAAOK,CAAP;AAAY;AAAE;AAC9F,iBAASF,IAAT,CAAcI,MAAd,EAAsB;AAAEA,mBAAOC,IAAP,GAAcT,QAAQQ,OAAOL,KAAf,CAAd,GAAsC,IAAIN,CAAJ,CAAM,UAAUG,OAAV,EAAmB;AAAEA,wBAAQQ,OAAOL,KAAf;AAAwB,aAAnD,EAAqDO,IAArD,CAA0DR,SAA1D,EAAqEK,QAArE,CAAtC;AAAuH;AAC/IH,aAAK,CAACN,YAAYA,UAAUa,KAAV,CAAgBhB,OAAhB,EAAyBC,cAAc,EAAvC,CAAb,EAAyDS,IAAzD,EAAL;AACH,KALM,CAAP;AAMH,CAPD;AAQAO,OAAOC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C,EAAEX,OAAO,IAAT,EAA7C;AACAY,QAAQ,kBAAR;AACA,IAAMC,YAAYD,QAAQ,SAAR,CAAlB;AACA,IAAME,UAAUF,QAAQ,SAAR,CAAhB;AACA,IAAMG,aAAaH,QAAQ,aAAR,CAAnB;AACA,IAAMI,WAAWJ,QAAQ,UAAR,CAAjB;AACA;AACA;AACA;AACAC,UAAUI,gBAAV,GAA6BV,IAA7B,CAAkC,UAACW,UAAD;AAAA,WAAgB3B,qBAAgB,KAAK,CAArB,EAAwB,KAAK,CAA7B,0CAAgC;AAAA;AAAA;AAAA;AAAA;AAAA;AAC9E;AACM4B,2BAFwE,GAElEL,SAFkE;;AAG9EK,4BAAIC,GAAJ,CAAQL,WAAWM,IAAX,EAAR;AACA;AACAF,4BAAIC,GAAJ,CAAQ,UAAUE,GAAV,EAAeC,GAAf,EAAoBrB,IAApB,EAA0B;AAC9BqB,gCAAIC,MAAJ,CAAW,6BAAX,EAA0C,GAA1C;AACAD,gCAAIC,MAAJ,CAAW,8BAAX,EAA2C,gDAA3C;AACAtB;AACH,yBAJD;AAKA;AACAc,iCAASS,SAAT,CAAmBC,OAAnB,CAA2B,iBAAS;AAChCP,gCAAIQ,MAAMC,MAAV,EAAkBD,MAAME,IAAxB,EAA8B,UAACC,OAAD,EAAUC,QAAV,EAAoB7B,IAApB,EAA6B;AACvDyB,sCAAMK,MAAN,CAAaF,OAAb,EAAsBC,QAAtB,EACKxB,IADL,CACU;AAAA,2CAAML,IAAN;AAAA,iCADV,EAEK+B,KAFL,CAEW;AAAA,2CAAO/B,KAAKgC,GAAL,CAAP;AAAA,iCAFX;AAGH,6BAJD;AAKH,yBAND;AAOA;AACMC,4BAnBwE,GAmBjE,IAnBiE;;AAoB9EhB,4BAAIiB,MAAJ,CAAWD,IAAX;AACAE,gCAAQC,GAAR,CAAY,mDAAmDH,IAA/D;;AArB8E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAhC,EAAhB;AAAA,CAAlC,EAsBIF,KAtBJ,CAsBU;AAAA,WAASI,QAAQC,GAAR,CAAY,4BAAZ,EAA0CC,KAA1C,CAAT;AAAA,CAtBV;AAuBA","file":"index.js","sourcesContent":["\"use strict\";\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nrequire(\"reflect-metadata\");\r\nconst typeorm_1 = require(\"typeorm\");\r\nconst express = require(\"express\");\r\nconst bodyParser = require(\"body-parser\");\r\nconst routes_1 = require(\"./routes\");\r\n// create connection with database\r\n// note that it's not active database connection\r\n// TypeORM creates connection pools and uses them for your requests\r\ntypeorm_1.createConnection().then((connection) => __awaiter(this, void 0, void 0, function* () {\r\n    // create express app\r\n    const app = express();\r\n    app.use(bodyParser.json());\r\n    // temporary local development concern addressed\r\n    app.use(function (req, res, next) {\r\n        res.header(\"Access-Control-Allow-Origin\", \"*\");\r\n        res.header(\"Access-Control-Allow-Headers\", \"Origin, X-Requested-With, Content-Type, Accept\");\r\n        next();\r\n    });\r\n    // register all application routes\r\n    routes_1.AppRoutes.forEach(route => {\r\n        app[route.method](route.path, (request, response, next) => {\r\n            route.action(request, response)\r\n                .then(() => next)\r\n                .catch(err => next(err));\r\n        });\r\n    });\r\n    // run app\r\n    const port = 3005;\r\n    app.listen(port);\r\n    console.log(\"Express application is up and running on port \" + port);\r\n})).catch(error => console.log(\"TypeORM connection error: \", error));\r\n//# sourceMappingURL=index.js.map"]}