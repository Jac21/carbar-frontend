{"version":3,"sources":["../server/server.js"],"names":["PORT","process","env","notifier","Notifier","task","test","request","path","params","id","use","param","then","result","Promise","reject","statusCode","message","resolve","app","bodyParser","json","api","express","static","join","__dirname","get","req","res","sendFile","server","http","createServer","listen","console","log"],"mappings":";;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;AACA;;;;;;AAEA,IAAMA,OAAOC,QAAQC,GAAR,CAAYF,IAAZ,IAAoB,IAAjC;;AAEA,IAAMG,WAAW,IAAIC,kBAAJ,EAAjB;;AAEA,uBACE,MADF,EAEE,UAACC,IAAD,EAAU;AACR;AACAF,WAASG,IAAT,CAAc,UAACC,OAAD,EAAa;AACzB;AACA,QAAIA,QAAQC,IAAR,KAAiB,eAAjB,IAAoCD,QAAQE,MAAR,CAAeC,EAAf,KAAsBL,KAAKK,EAAnE,EAAuE;AACrE,aAAO,KAAP;AACD;AACD,WAAO,IAAP;AACD,GAND;AAOD,CAXH;;AAcAP,SAASQ,GAAT,CAAa,WAAb,EAA0B;AAAA,SAAM,qBAAN;AAAA,CAA1B;AACAR,SAASQ,GAAT,CAAa,eAAb,EAA8B;AAAA,SAC5B,mBAAQC,MAAMF,EAAd,EAAkBG,IAAlB,CAAuB,UAACC,MAAD,EAAY;AACjC,QAAI,CAACA,OAAOT,IAAZ,EAAkB;AAChB,aAAOU,QAAQC,MAAR,CAAe,EAAEC,YAAY,GAAd,EAAmBC,SAAS,WAA5B,EAAf,CAAP;AACD;AACD,WAAOH,QAAQI,OAAR,CAAgBL,MAAhB,CAAP;AACD,GALD,CAD4B;AAAA,CAA9B;;AASA,IAAMM,MAAM,yBACTT,GADS,CACL,4BADK,EAETA,GAFS,CAEL,6BAFK,EAGTA,GAHS,CAGL,sBAAO,MAAP,CAHK,EAITA,GAJS,CAILU,qBAAWC,IAAX,EAJK,CAAZ;;AAMA;AACAF,IAAIT,GAAJ,CAAQ,MAAR,EAAgBY,aAAhB;;AAEA;AACAH,IAAIT,GAAJ,CAAQ,GAAR,EAAaa,kBAAQC,MAAR,CAAejB,eAAKkB,IAAL,CAAUC,SAAV,EAAqB,UAArB,CAAf,CAAb;AACAP,IAAIQ,GAAJ,CAAQ,IAAR,EAAc,UAACC,GAAD,EAAMC,GAAN,EAAc;AAC1BA,MAAIC,QAAJ,CAAavB,eAAKW,OAAL,CAAaX,eAAKkB,IAAL,CAAUC,SAAV,EAAqB,qBAArB,CAAb,CAAb;AACD,CAFD;;AAIA,IAAMK,SAASC,eAAKC,YAAL,CAAkBd,GAAlB,CAAf;AACAY,OAAOG,MAAP,CAAcnC,IAAd;AACAG,SAASgC,MAAT,CAAgBH,MAAhB;;AAEAI,QAAQC,GAAR,yCAAkDrC,IAAlD","file":"server.js","sourcesContent":["import compression from 'compression';\r\nimport express from 'express';\r\nimport http from 'http';\r\nimport morgan from 'morgan';\r\nimport bodyParser from 'body-parser';\r\nimport cookieParser from 'cookie-parser';\r\nimport path from 'path';\r\nimport api from './api';\r\nimport { addNotifier, getTasks, getTask } from './data';\r\nimport Notifier from './notifier';\r\n\r\nconst PORT = process.env.PORT || 8102;\r\n\r\nconst notifier = new Notifier();\r\n\r\naddNotifier(\r\n  'task',\r\n  (task) => {\r\n    // this can be invoked multiple times as new requests happen\r\n    notifier.test((request) => {\r\n      // we should skip notify if the id of the task does not match the payload\r\n      if (request.path === '/api/task/:id' && request.params.id !== task.id) {\r\n        return false;\r\n      }\r\n      return true;\r\n    });\r\n  }\r\n);\r\n\r\nnotifier.use('/api/task', () => getTasks());\r\nnotifier.use('/api/task/:id', param => (\r\n  getTask(param.id).then((result) => {\r\n    if (!result.task) {\r\n      return Promise.reject({ statusCode: 404, message: 'Not Found' });\r\n    }\r\n    return Promise.resolve(result);\r\n  })\r\n));\r\n\r\nconst app = express()\r\n  .use(compression())\r\n  .use(cookieParser())\r\n  .use(morgan('tiny'))\r\n  .use(bodyParser.json());\r\n\r\n// REST API\r\napp.use('/api', api);\r\n\r\n// UI\r\napp.use('/', express.static(path.join(__dirname, '/../dist')));\r\napp.get('/*', (req, res) => {\r\n  res.sendFile(path.resolve(path.join(__dirname, '/../dist/index.html')));\r\n});\r\n\r\nconst server = http.createServer(app);\r\nserver.listen(PORT);\r\nnotifier.listen(server);\r\n\r\nconsole.log(`Server started at http://localhost:${PORT}`);\r\n"]}