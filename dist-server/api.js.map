{"version":3,"sources":["../server/api.js"],"names":["router","express","Router","post","req","res","body","email","password","temporaryCredentials","temporaryUsername","temporaryPassword","statusMessage","status","end","name","split","replace","now","Date","token","getTime","session","json","get","query","then","tasks","params","id","result","task","delete","undefined","module","exports"],"mappings":";;AAAA;;;;AACA;;AAKA;;;;AAKA,IAAMA,SAASC,kBAAQC,MAAR,EAAf;;AAEAF,OAAOG,IAAP,CAAY,WAAZ,EAAyB,UAACC,GAAD,EAAMC,GAAN,EAAc;AAAA,kBAIjCD,IAAIE,IAJ6B;AAAA,MAEnCC,KAFmC,aAEnCA,KAFmC;AAAA,MAGnCC,QAHmC,aAGnCA,QAHmC;;AAKrC,MAAI,CAACD,KAAD,IAAU,CAACC,QAAX,IAAuBD,UAAU,OAAjC,IAA4CA,UAC9CE,0BAAqBC,iBADnB,IACwCF,aAC1CC,0BAAqBE,iBAFvB,EAE0C;AACxCN,QAAIO,aAAJ,GAAoB,2BAApB;AACAP,QAAIQ,MAAJ,CAAW,GAAX,EAAgBC,GAAhB;AACD,GALD,MAKO;AACL,QAAMC,OAAOR,MAAMS,KAAN,CAAY,GAAZ,EAAiB,CAAjB,EAAoBC,OAApB,CAA4B,MAA5B,EAAoC,GAApC,CAAb,CADK,CACkD;AACvD,QAAMC,MAAM,IAAIC,IAAJ,EAAZ;AACA,QAAMC,mBAAiBF,IAAIG,OAAJ,EAAvB,CAHK,CAGmC;AACxC,QAAMC,UAAU;AACdf,kBADc;AAEdQ,gBAFc;AAGdK;AAHc,KAAhB;AAKA,0BAAWA,KAAX,EAAkBE,OAAlB;AACAjB,QAAIkB,IAAJ,CAASD,OAAT;AACD;AACF,CAtBD;;AAwBAtB,OAAOwB,GAAP,CAAW,OAAX,EAAoB,UAACpB,GAAD,EAAMC,GAAN,EAAc;AAChC,sBAASD,IAAIqB,KAAb,EAAoBC,IAApB,CAAyB;AAAA,WAASrB,IAAIkB,IAAJ,CAASI,KAAT,CAAT;AAAA,GAAzB;AACD,CAFD;;AAIA3B,OAAOwB,GAAP,CAAW,WAAX,EAAwB,UAACpB,GAAD,EAAMC,GAAN,EAAc;AACpC,qBAAQD,IAAIwB,MAAJ,CAAWC,EAAnB,EAAuBH,IAAvB,CAA4B,UAACI,MAAD,EAAY;AACtC,QAAI,CAACA,OAAOC,IAAZ,EAAkB;AAChB1B,UAAIQ,MAAJ,CAAW,GAAX,EAAgBC,GAAhB;AACD,KAFD,MAEO;AACLT,UAAIkB,IAAJ,CAASO,MAAT;AACD;AACF,GAND;AAOD,CARD;;AAUA9B,OAAOgC,MAAP,CAAc,aAAd,EAA6B,UAAC5B,GAAD,EAAMC,GAAN,EAAc;AACzCA,MAAIkB,IAAJ,CAASU,SAAT;AACD,CAFD;;AAIAC,OAAOC,OAAP,GAAiBnC,MAAjB","file":"api.js","sourcesContent":["import express from 'express';\r\nimport {\r\n  addSession,\r\n  getTasks,\r\n  getTask\r\n} from './data';\r\nimport {\r\n  temporaryCredentials\r\n} from './env';\r\n\r\n\r\nconst router = express.Router();\r\n\r\nrouter.post('/sessions', (req, res) => {\r\n  const {\r\n    email,\r\n    password\r\n  } = req.body;\r\n  if (!email || !password || email === 'error' || email !==\r\n    temporaryCredentials.temporaryUsername || password !==\r\n    temporaryCredentials.temporaryPassword) {\r\n    res.statusMessage = 'Invalid email or password';\r\n    res.status(401).end();\r\n  } else {\r\n    const name = email.split('@')[0].replace(/\\.|_/, ' '); // simulated\r\n    const now = new Date();\r\n    const token = `token-${now.getTime()}`; // simulated\r\n    const session = {\r\n      email,\r\n      name,\r\n      token\r\n    };\r\n    addSession(token, session);\r\n    res.json(session);\r\n  }\r\n});\r\n\r\nrouter.get('/task', (req, res) => {\r\n  getTasks(req.query).then(tasks => res.json(tasks));\r\n});\r\n\r\nrouter.get('/task/:id', (req, res) => {\r\n  getTask(req.params.id).then((result) => {\r\n    if (!result.task) {\r\n      res.status(404).end();\r\n    } else {\r\n      res.json(result);\r\n    }\r\n  });\r\n});\r\n\r\nrouter.delete('/sessions/*', (req, res) => {\r\n  res.json(undefined);\r\n});\r\n\r\nmodule.exports = router;\r\n"]}